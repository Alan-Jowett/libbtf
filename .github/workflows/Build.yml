# Copyright (c) Microsoft Corporation
# SPDX-License-Identifier: MIT

name: CI/CD

on:
  workflow_call:
    inputs:
      platform:
        required: true
        type: string
      configuration:
        required: true
        type: string
      enable_sanitizers:
        required: false
        type: boolean
      enable_coverage:
        required: false
        type: boolean

permissions:
  contents: read
  packages: write

jobs:
  build:

    runs-on: ${{inputs.platform}}
    env:
      BUILD_TYPE: ${{inputs.configuration}}

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: Install prerequisites - Ubuntu-22.04
      if: inputs.platform == 'ubuntu-22.04'
      run: |
        sudo apt-get install -y lcov

    - name: Install prerequisites - macos-11
      if: inputs.platform == 'macos-11'
      run: |
        brew install \
          cmake \
          ninja \
          ccache

    - name: Configure CMake
      if: inputs.platform == 'windows-2019' || inputs.platform == 'windows-2022'
      run: |
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBTF_ENABLE_TESTS=TRUE -DBTF_WARNING_AS_ERROR=TRUE

    - name: Configure CMake
      if: inputs.platform == 'ubuntu-22.04' || inputs.platform == 'macos-11'
      run: |
        if [ "${{inputs.enable_sanitizers}}" = "true" ]; then
          export SANITIZER_FLAGS="-fsanitize=address -fsanitize=undefined -fno-sanitize-recover=all"
        fi
        if [ "${{inputs.enable_coverage}}" = "true" ]; then
          export COVERAGE_FLAGS="-DCMAKE_CXX_FLAGS=\"--coverage\" -DCMAKE_C_FLAGS=\"--coverage\""
        fi
        cmake \
          -B ${{github.workspace}}/build \
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
          -DCMAKE_CXX_FLAGS="${SANITIZER_FLAGS}" \
          -DCMAKE_C_FLAGS="${SANITIZER_FLAGS}" \
          -DBTF_ENABLE_TESTS=TRUE \
          ${COVERAGE_FLAGS}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Tests - Non-Windows
      if: inputs.platform != 'windows-2019' && inputs.platform != 'windows-2022'
      working-directory: ${{github.workspace}}
      run: |
        build/test/tests -d yes

    - name: Tests - Windows
      if: inputs.platform == 'windows-2019' || inputs.platform == 'windows-2022'
      working-directory: ${{github.workspace}}
      run: |
        build/test/${{env.BUILD_TYPE}}/tests.exe -d yes

    - name: Generate code coverage report
      if: inputs.enable_coverage == true
      run: |
        mkdir -p coverage
        lcov --capture --directory build --include '${{github.workspace}}/*' --output-file coverage/lcov.info --exclude '${{github.workspace}}/external/*' --exclude '${{github.workspace}}/build/*'

    - name: Coveralls Parallel
      if: inputs.enable_coverage == true
      uses: coverallsapp/github-action@v2.1.2
      with:
        github-token: ${{ secrets.github_token }}
        flag-name: run-${{inputs.build_type}}-${{inputs.platform}}-${{inputs.arch}}
        parallel: true

    - name: Run test
      if: inputs.platform != 'windows-2019' && inputs.platform != 'windows-2022'
      id: run_test
      shell: pwsh
      run:
        $command = ${{env.TEST_COMMAND}}
        $command_prolog = ""
        $command_epilog = ""
        if ("${{inputs.vs_dev}}" -eq "true") {
          . "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\Launch-VsDevShell.ps1
        }
        if ("${{inputs.code_coverage}}" -eq "true") {
          $command_prolog = "OpenCppCoverage.exe -q --cover_children --sources %CD% --excluded_sources %CD%\external\Catch2 --export_type cobertura:ebpf_for_windows.xml --working_dir ${{env.BUILD_PLATFORM}}\${{env.BUILD_CONFIGURATION}} -- "
        }
        if ("${{inputs.fault_injection}}" -eq "true") {
          $env:EBPF_FAULT_INJECTION_ENABLED = "yes"
          if ("${{inputs.code_coverage}}" -eq "true") {
            $command_epilog = "16"
          } else {
            $command_epilog = "4"
          }
          $command_prolog = .\Test-FaultInjection.ps1 ${{env.DUMP_PATH}} ${{env.TEST_TIMEOUT}}
        } else
          $command_prolog = .\Test-Run.ps1 ${{env.DUMP_PATH}} ${{env.TEST_TIMEOUT}}
        }
        if ("${{inputs.environment}}" -eq "ebpf_cicd_tests") {
          $command_prolog = ""
          $command_epilog = ""
        }
        $command = $command_prolog + $command + $command_epilog
        & $command
